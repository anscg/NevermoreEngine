"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4448],{99252:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new InputKeyMapListProvider. The name will be used for retrieval,\\nfor example, if the dialog system needs to get a general input hint to show\\nto the user.","params":[{"name":"providerName","desc":"Name to use for global specification.","lua_type":"string"},{"name":"createDefaults","desc":"Callback to construct the default items on init","lua_type":"callback"}],"returns":[{"desc":"","lua_type":"InputKeyMapList"}],"function_type":"static","source":{"line":65,"path":"src/inputkeymaputils/src/Shared/InputKeyMapListProvider.lua"}},{"name":"GetProviderName","desc":"Gets this providers name","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":95,"path":"src/inputkeymaputils/src/Shared/InputKeyMapListProvider.lua"}},{"name":"GetInputKeyMapList","desc":"Gets an input key map list for the given name. Errors if it is not\\ndefined.","params":[{"name":"keyMapListName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"InputKeyMapList"}],"function_type":"method","source":{"line":106,"path":"src/inputkeymaputils/src/Shared/InputKeyMapListProvider.lua"}},{"name":"FindInputKeyMapList","desc":"Finds an input key map list for the given name","params":[{"name":"keyMapListName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"InputKeyMapList"}],"function_type":"method","source":{"line":120,"path":"src/inputkeymaputils/src/Shared/InputKeyMapListProvider.lua"}}],"properties":[],"types":[],"name":"InputKeyMapListProvider","desc":"Centralizes input of keys. You can construct a new provider in a\\npackage and key bindings can be recovered from it. This is designed\\nfor user configuration/rebindings.\\n\\n```lua\\nlocal inputMapProvider = InputKeyMapListProvider.new(\\"General\\", function(self)\\n\\tself:Add(InputKeyMapList.new(\\"JUMP\\", {\\n\\t\\tInputKeyMap.new(InputModeTypes.KeyboardAndMouse, { Enum.KeyCode.Space });\\n\\t\\tInputKeyMap.new(InputModeTypes.Gamepads, { Enum.KeyCode.ButtonA });\\n\\t\\tInputKeyMap.new(InputModeTypes.Touch, { SlottedTouchButtonUtils.createSlottedTouchButton(\\"primary3\\") });\\n\\t}, {\\n\\t\\tbindingName = \\"Jump\\";\\n\\t\\trebindable = true;\\n\\t}))\\n\\tself:Add(InputKeyMapList.new(\\"HONK\\", {\\n\\t\\tInputKeyMap.new(InputModeTypes.KeyboardAndMouse, { Enum.KeyCode.H });\\n\\t\\tInputKeyMap.new(InputModeTypes.Gamepads, { Enum.KeyCode.DPadUp });\\n\\t\\tInputKeyMap.new(InputModeTypes.Touch, { SlottedTouchButtonUtils.createSlottedTouchButton(\\"primary2\\") });\\n\\t}, {\\n\\t\\tbindingName = \\"Honk\\";\\n\\t\\trebindable = true;\\n\\t}))\\n\\tself:Add(InputKeyMapList.new(\\"BOOST\\", {\\n\\t\\tInputKeyMap.new(InputModeTypes.KeyboardAndMouse, { Enum.KeyCode.LeftControl });\\n\\t\\tInputKeyMap.new(InputModeTypes.Gamepads, { Enum.KeyCode.ButtonX });\\n\\t\\tInputKeyMap.new(InputModeTypes.Touch, { SlottedTouchButtonUtils.createSlottedTouchButton(\\"primary4\\") });\\n\\t}, {\\n\\t\\tbindingName = \\"Boost\\";\\n\\t\\trebindable = true;\\n\\t}))\\nend)\\n\\nlocal inputMap = serviceBag:GetService(inputMapProvider)\\n\\nserviceBag:Init()\\nserviceBag:Start()\\n```","source":{"line":42,"path":"src/inputkeymaputils/src/Shared/InputKeyMapListProvider.lua"}}')}}]);