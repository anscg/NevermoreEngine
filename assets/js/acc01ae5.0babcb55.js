"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[65058],{39166:e=>{e.exports=JSON.parse('{"functions":[{"name":"hintSharedMechanism","desc":"Hints that the two parts share a mechanism. This is sort of a physics hack since Roblox\\nwill keep mechanisms on the same network owner.","params":[{"name":"part0","desc":"","lua_type":"BasePart"},{"name":"part1","desc":"","lua_type":"BasePart"}],"returns":[{"desc":"","lua_type":"Maid"}],"function_type":"static","source":{"line":26,"path":"src/networkropeutils/src/Shared/NetworkRopeUtils.lua"}},{"name":"clearNetworkOwnerHints","desc":"Removes all network owner hints from a given part","params":[{"name":"part","desc":"","lua_type":"Part"}],"returns":[],"function_type":"static","source":{"line":64,"path":"src/networkropeutils/src/Shared/NetworkRopeUtils.lua"}}],"properties":[],"types":[],"name":"NetworkRopeUtils","desc":"Utility function to create network ropes which hint to Roblox that two assemblies\\nshould be considered to be owned by the same network owner.","source":{"line":7,"path":"src/networkropeutils/src/Shared/NetworkRopeUtils.lua"}}')}}]);