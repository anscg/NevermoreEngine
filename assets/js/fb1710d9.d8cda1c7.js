"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[97441],{86025:a=>{a.exports=JSON.parse('{"functions":[{"name":"observeLastCharacterBrio","desc":"Observe a player\'s last character.","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Observable<Brio<Model>>"}],"function_type":"static","source":{"line":21,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}},{"name":"observeLastHumanoidBrio","desc":"Observe a player\'s last humanoid. Note that it may not be alive!","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Observable<Brio<Humanoid>>"}],"function_type":"static","source":{"line":34,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}},{"name":"observeLastAliveHumanoidBrio","desc":"Observes a player\'s last living humanoid.\\n\\n```lua\\nlocal Players = game:GetService(\\"Players\\")\\n\\nmaid:GiveTask(\\n\\tRxCharacterUtils.observeLastAliveHumanoidBrio(Players.LocalPlayer)\\n\\t\\t:Subscribe(function(humanoidBrio)\\n\\t\\t\\tlocal humanoid: Humanoid = humanoidBrio:GetValue()\\n\\t\\t\\tlocal humanoidMaid = humanoidBrio:ToMaid()\\n\\n\\t\\t\\tprint(\\"Humanoid:\\", humanoid)\\n\\n\\t\\t\\thumanoidMaid:GiveTask(function()\\n\\t\\t\\t\\t-- The maid cleans up on humanoid death, or when given player leaves the game.\\n\\t\\t\\t\\tprint(\\"Humanoid has been killed or destroyed!\\")\\n\\t\\t\\tend)\\n\\t\\tend)\\n)\\n```","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Observable<Brio<Humanoid>>"}],"function_type":"static","source":{"line":95,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}}],"properties":[],"types":[],"name":"RxCharacterUtils","desc":"Utilities for observing characters and their humanoids.","source":{"line":5,"path":"src/characterutils/src/Shared/RxCharacterUtils.lua"}}')}}]);