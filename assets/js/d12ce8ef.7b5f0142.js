"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[46840],{9147:e=>{e.exports=JSON.parse('{"functions":[{"name":"bindToRenderStep","desc":"Binds the given update function to [RunService.RenderStepped].\\n\\n```lua\\nlocal spring = Spring.new(0)\\nlocal maid = Maid.new()\\n\\nlocal startAnimation, maid._stopAnimation = StepUtils.bindToRenderStep(function()\\n\\tlocal animating, position = SpringUtils.animating(spring)\\n\\n\\tprint(position)\\n\\n\\treturn animating\\nend)\\n\\nspring.t = 1\\nstartAnimation()\\n```\\n\\n:::tip\\nBe sure to call the disconnect function when cleaning up, otherwise you may memory leak.\\n:::","params":[{"name":"update","desc":"should return true while it needs to update","lua_type":"() -> boolean"}],"returns":[{"desc":"Connect function","lua_type":"(...) -> ()"},{"desc":"Disconnect function","lua_type":"() -> ()"}],"function_type":"static","source":{"line":38,"path":"src/steputils/src/Shared/StepUtils.lua"}},{"name":"bindToStepped","desc":"Binds the given update function to [RunService.Stepped]. See [StepUtils.bindToRenderStep] for details.\\n\\n\\n:::tip\\nBe sure to call the disconnect function when cleaning up, otherwise you may memory leak.\\n:::","params":[{"name":"update","desc":"should return true while it needs to update","lua_type":"() -> boolean"}],"returns":[{"desc":"Connect function","lua_type":"(...) -> ()"},{"desc":"Disconnect function","lua_type":"() -> ()"}],"function_type":"static","source":{"line":54,"path":"src/steputils/src/Shared/StepUtils.lua"}},{"name":"bindToSignal","desc":"Binds an update event to a signal until the update function stops returning a truthy\\nvalue.","params":[{"name":"signal","desc":"","lua_type":"Signal | RBXScriptSignal"},{"name":"update","desc":"should return true while it needs to update","lua_type":"() -> boolean"}],"returns":[{"desc":"Connect function","lua_type":"(...) -> ()"},{"desc":"Disconnect function","lua_type":"() -> ()"}],"function_type":"static","source":{"line":67,"path":"src/steputils/src/Shared/StepUtils.lua"}},{"name":"onceAtRenderPriority","desc":"Calls the function once at the given priority level, unless the cancel callback is\\ninvoked.","params":[{"name":"priority","desc":"","lua_type":"number"},{"name":"func","desc":"Function to call","lua_type":"function"}],"returns":[{"desc":"Call this function to cancel call","lua_type":"function"}],"function_type":"static","source":{"line":121,"path":"src/steputils/src/Shared/StepUtils.lua"}},{"name":"onceAtStepped","desc":"Invokes the function once at stepped, unless the cancel callback is called.\\n\\n```lua\\n-- Sometimes you need to defer the execution of code to make physics happy\\nmaid:GiveTask(StepUtils.onceAtStepped(function()\\n\\tpart.CFrame = CFrame.new(0, 0, )\\nend))\\n```","params":[{"name":"func","desc":"Function to call","lua_type":"function"}],"returns":[{"desc":"Call this function to cancel call","lua_type":"function"}],"function_type":"static","source":{"line":151,"path":"src/steputils/src/Shared/StepUtils.lua"}},{"name":"onceAtRenderStepped","desc":"Invokes the function once at renderstepped, unless the cancel callback is called.","params":[{"name":"func","desc":"Function to call","lua_type":"function"}],"returns":[{"desc":"Call this function to cancel call","lua_type":"function"}],"function_type":"static","source":{"line":161,"path":"src/steputils/src/Shared/StepUtils.lua"}},{"name":"onceAtEvent","desc":"Invokes the function once at the given event, unless the cancel callback is called.","params":[{"name":"event","desc":"","lua_type":"Signal | RBXScriptSignal"},{"name":"func","desc":"Function to call","lua_type":"function"}],"returns":[{"desc":"Call this function to cancel call","lua_type":"function"}],"function_type":"static","source":{"line":172,"path":"src/steputils/src/Shared/StepUtils.lua"}}],"properties":[],"types":[],"name":"StepUtils","desc":"Utility functions primarily used to bind animations into update loops of the Roblox engine.","source":{"line":5,"path":"src/steputils/src/Shared/StepUtils.lua"}}')}}]);