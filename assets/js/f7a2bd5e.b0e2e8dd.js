"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[62896],{13052:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new DataStore. See [DataStoreStage] for more API.","params":[{"name":"robloxDataStore","desc":"","lua_type":"DataStore"},{"name":"key","desc":"","lua_type":"string"}],"returns":[],"function_type":"static","source":{"line":52,"path":"src/datastore/src/Server/DataStore.lua"}},{"name":"SetCacheTime","desc":"Sets how long the datastore will cache for","params":[{"name":"cacheTimeSeconds","desc":"","lua_type":"number?"}],"returns":[],"function_type":"method","source":{"line":98,"path":"src/datastore/src/Server/DataStore.lua"}},{"name":"GetFullPath","desc":"Returns the full path for the datastore","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":108,"path":"src/datastore/src/Server/DataStore.lua"}},{"name":"DidLoadFail","desc":"Returns whether the datastore failed.","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":116,"path":"src/datastore/src/Server/DataStore.lua"}},{"name":"Save","desc":"Saves all stored data.","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"method","source":{"line":140,"path":"src/datastore/src/Server/DataStore.lua"}},{"name":"Load","desc":"Loads data. This returns the originally loaded data.","params":[{"name":"keyName","desc":"","lua_type":"string"},{"name":"defaultValue","desc":"","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"any?"}],"function_type":"method","source":{"line":172,"path":"src/datastore/src/Server/DataStore.lua"}}],"properties":[{"name":"Saving","desc":"Prop that fires when saving. Promise will resolve once saving is complete.","lua_type":"Signal<Promise>","source":{"line":64,"path":"src/datastore/src/Server/DataStore.lua"}}],"types":[],"name":"DataStore","desc":"Wraps the datastore object to provide async cached loading and saving. See [DataStoreStage] for more API.\\n\\nHas the following features\\n* Automatic save\\n* Jitter\\n* De-duplication (only updates data it needs)\\n\\n```lua\\nlocal playerMoneyValue = Instance.new(\\"IntValue\\")\\nplayerMoneyValue.Value = 0\\n\\nlocal dataStore = DataStore.new(DataStoreService:GetDataStore(\\"test\\"), test-store\\")\\ndataStore:Load(\\"money\\", 0):Then(function(money)\\n\\tplayerMoneyValue.Value = money\\n\\tdataStore:StoreOnValueChange(\\"money\\", playerMoneyValue)\\nend):Catch(function()\\n\\t-- TODO: Notify player\\nend)\\n\\n```","realm":["Server"],"source":{"line":26,"path":"src/datastore/src/Server/DataStore.lua"}}')}}]);