"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[22164],{13598:e=>{e.exports=JSON.parse('{"functions":[{"name":"isModifierInputChord","desc":"Checks","params":[{"name":"data","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":18,"path":"src/inputkeymaputils/src/Shared/Types/InputChordUtils.lua"}},{"name":"createModifierInputChord","desc":"Creates a modifier input chord. This chord specifically separates the\\norder such that the event only triggers when the keyCode is pressed, but\\nalso requires the modifier key to be down at the trigger point.\\n\\nThis mirrors the existing modifier standards for Windows.","params":[{"name":"modifiers","desc":"","lua_type":"{ KeyCode }"},{"name":"keyCode","desc":"","lua_type":"KeyCode"}],"returns":[{"desc":"","lua_type":"ModifierInputChord"}],"function_type":"static","source":{"line":36,"path":"src/inputkeymaputils/src/Shared/Types/InputChordUtils.lua"}}],"properties":[],"types":[],"name":"InputChordUtils","desc":"Standardized data type to define an input chord, such as Ctrl+Z.","source":{"line":6,"path":"src/inputkeymaputils/src/Shared/Types/InputChordUtils.lua"}}')}}]);