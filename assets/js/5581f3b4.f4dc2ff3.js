"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[42289],{72196:e=>{e.exports=JSON.parse('{"functions":[{"name":"request","desc":"Decodes JSON from the response\\n\\n```lua\\nlocal requestPromise = HttpPromise.request({\\n\\tHeaders = {\\n\\t\\t[\\"Content-Type\\"] = \\"application/json\\";\\n\\t};\\n\\tUrl = DISCORD_LOG_URL;\\n\\tBody = HttpService:JSONEncode(data);\\n\\tMethod = \\"POST\\";\\n})\\n```","params":[{"name":"request","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"Promise<table>"}],"function_type":"static","source":{"line":52,"path":"src/httppromise/src/Server/HttpPromise.lua"}},{"name":"json","desc":"Makes a GET JSON request and then expects JSON as a result from said request\\n\\n```lua\\nHttpPromise.json(\\"https://quenty.org/banned/4397833/status\\")\\n\\t:Then(print)\\n```","params":[{"name":"request","desc":"","lua_type":"table | string"}],"returns":[{"desc":"","lua_type":"Promise<table>"}],"function_type":"static","source":{"line":93,"path":"src/httppromise/src/Server/HttpPromise.lua"}},{"name":"logFailedRequests","desc":"Logs failed requests and any errors retrieved\\n\\n```lua\\nHttpPromise.json(\\"https://quenty.org/banned/4397833/status\\")\\n\\t:Catch(HttpPromise.logFailedRequests)\\n```","params":[{"name":"...","desc":"A list of requests to retrieve. Meant to be used","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":115,"path":"src/httppromise/src/Server/HttpPromise.lua"}},{"name":"decodeJson","desc":"Decodes JSON from the response","params":[{"name":"response","desc":"","lua_type":"{ Body: string }"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":131,"path":"src/httppromise/src/Server/HttpPromise.lua"}}],"properties":[],"types":[],"name":"HttpPromise","desc":"Provides a wrapper around HttpService with a promise API\\n\\nBy combining functions in HttpPromise, we can get a generic request result in a very clean way.\\n```lua\\nlocal function logToDiscord(body)\\n\\treturn HttpPromise.request({\\n\\t\\tHeaders = {\\n\\t\\t\\t[\\"Content-Type\\"] = \\"application/json\\";\\n\\t\\t};\\n\\t\\tUrl = DISCORD_LOG_URL;\\n\\t\\tBody = HttpService:JSONEncode(data);\\n\\t\\tMethod = \\"POST\\";\\n\\t})\\n\\t:Then(HttpPromise.decodeJson)\\n\\t:Catch(HttpPromise.logFailedRequests)\\nend\\n```","realm":["Server"],"source":{"line":23,"path":"src/httppromise/src/Server/HttpPromise.lua"}}')}}]);