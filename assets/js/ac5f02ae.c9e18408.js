"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[57087],{21248:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetRemoteEvent","desc":"Retrieves a global remote event from the store. On the server, it constructs a new one,\\nand on the client, it waits for it to exist.\\n\\n:::tip\\nConsider using [PromiseGetRemoteEvent] for a non-yielding version\\n:::\\n\\n```lua\\n-- server.lua\\nlocal GetRemoteEvent = require(\\"GetRemoteEvent\\")\\n\\nlocal remoteEvent = GetRemoteEvent(\\"testing\\")\\nremoteEvent.OnServerEvent:Connect(print)\\n\\n-- client.lua\\nlocal GetRemoteEvent = require(\\"GetRemoteEvent\\")\\n\\nlocal remoteEvent = GetRemoteEvent(\\"testing\\")\\nremoteEvent:FireServer(\\"Hello\\") --\x3e Hello (on the server)\\n```\\n\\n:::info\\nIf the game is not running, then a mock remote event will be created\\nfor use in testing.\\n:::","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"RemoteEvent"}],"function_type":"static","yields":true,"source":{"line":39,"path":"src/remoting/src/Shared/GetRemoteEvent.lua"}}],"properties":[],"types":[],"name":"GetRemoteEvent","desc":"Provides getting named global [RemoteEvent] resources.","source":{"line":5,"path":"src/remoting/src/Shared/GetRemoteEvent.lua"}}')}}]);