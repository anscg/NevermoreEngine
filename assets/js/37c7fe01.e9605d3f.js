"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[22105],{46503:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new ObservableCountingMap","params":[],"returns":[{"desc":"","lua_type":"ObservableCountingMap<T>"}],"function_type":"static","source":{"line":22,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"isObservableMap","desc":"Returns whether the value is an observable counting map","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":74,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"ObserveKeysList","desc":"Observes the current set of active keys","params":[],"returns":[{"desc":"","lua_type":"Observable<{ T }>"}],"function_type":"method","source":{"line":82,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"ObserveKeysSet","desc":"Observes the current set of active keys","params":[],"returns":[{"desc":"","lua_type":"Observable<{ [T]: true }>"}],"function_type":"method","source":{"line":98,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"ObserveKeysBrio","desc":"Observes all keys in the map","params":[],"returns":[{"desc":"","lua_type":"Observable<Brio<T>>"}],"function_type":"method","source":{"line":137,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"Contains","desc":"Returns whether the map contains the key","params":[{"name":"key","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":171,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"Get","desc":"Returns the count for the key or 0 if there is no key","params":[{"name":"key","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":182,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"GetTotalKeyCount","desc":"Gets the count of keys in the map","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":192,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"ObserveTotalKeyCount","desc":"Observes the count of the keys in the map","params":[],"returns":[{"desc":"","lua_type":"Observable<number>"}],"function_type":"method","source":{"line":200,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"Set","desc":"Sets the current value","params":[{"name":"key","desc":"","lua_type":"T"},{"name":"amount","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"callback"}],"function_type":"method","source":{"line":210,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"Add","desc":"Adds the key to the map if it does not exists.","params":[{"name":"key","desc":"","lua_type":"T"},{"name":"amount","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"callback"}],"function_type":"method","source":{"line":233,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"RemoveCount","desc":"Removes the key from the set if it exists.","params":[{"name":"key","desc":"","lua_type":"T"},{"name":"amount","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"callback"}],"function_type":"method","source":{"line":273,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"GetFirstKey","desc":"Gets the first key","params":[],"returns":[{"desc":"","lua_type":"T"}],"function_type":"method","source":{"line":313,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"GetKeysList","desc":"Gets a list of all keys.","params":[],"returns":[{"desc":"","lua_type":"{ T }"}],"function_type":"method","source":{"line":322,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"Destroy","desc":"Cleans up the ObservableCountingMap and sets the metatable to nil.","params":[],"returns":[],"function_type":"method","source":{"line":333,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}}],"properties":[{"name":"KeyAdded","desc":"Fires when an key is added","lua_type":"Signal<T>","readonly":true,"source":{"line":38,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"KeyRemoved","desc":"Fires when an key is removed.","lua_type":"Signal<T>","readonly":true,"source":{"line":47,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"KeyChanged","desc":"Fires when an item count changes","lua_type":"Signal<T>","readonly":true,"source":{"line":56,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}},{"name":"CountChanged","desc":"Fires when the total count changes.","lua_type":"RBXScriptSignal","source":{"line":64,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}}],"types":[],"name":"ObservableCountingMap","desc":"An observable map that counts up/down and removes when the count is zero.","source":{"line":5,"path":"src/observablecollection/src/Shared/ObservableCountingMap.lua"}}')}}]);