"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[68534],{97984:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetRemoteFunction","desc":"Retrieves a global remote function from the store. On the server, it constructs a new one,\\nand on the client, it waits for it to exist.\\n\\n:::tip\\nConsider using [PromiseGetRemoteFunction] for a non-yielding version\\n:::\\n\\n```lua\\n-- server.lua\\nlocal GetRemoteFunction = require(\\"GetRemoteFunction\\")\\n\\nlocal remoteFunction = GetRemoteFunction(\\"testing\\")\\nremoteFunction.OnServerInvoke = function(_player, text)\\n\\treturn \\"HI \\" .. tostring(text)\\nend\\n\\n-- client.lua\\nlocal GetRemoteFunction = require(\\"GetRemoteFunction\\")\\n\\nlocal remoteFunction = GetRemoteFunction(\\"testing\\")\\nprint(remoteFunction:InvokeServer(\\"Bob\\")) --\x3e HI Bob\\n```\\n\\n:::info\\nIf the game is not running, then a mock remote function will be created\\nfor use in testing.\\n:::","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"RemoteFunction"}],"function_type":"static","yields":true,"source":{"line":42,"path":"src/remoting/src/Shared/GetRemoteFunction.lua"}}],"properties":[],"types":[],"name":"GetRemoteFunction","desc":"Provides getting named global [RemoteFunction] resources.","source":{"line":6,"path":"src/remoting/src/Shared/GetRemoteFunction.lua"}}')}}]);